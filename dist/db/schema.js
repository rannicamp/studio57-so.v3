import { pgTable, serial, text, varchar, integer, timestamp, } from "drizzle-orm/pg-core";
export const cadastroEmpresa = pgTable("cadastro_empresa", {
    id: serial("id").primaryKey(),
    cnpj: text("cnpj").notNull().unique(),
    razaoSocial: text("razao_social").notNull(),
    nomeFantasia: text("nome_fantasia"),
    inscricaoEstadual: text("inscricao_estadual"),
    inscricaoMunicipal: text("inscricao_municipal"),
    addressStreet: text("address_street"),
    addressNumber: text("address_number"),
    addressComplement: text("address_complement"),
    cep: varchar("cep", { length: 9 }),
    city: text("city"),
    state: varchar("state", { length: 2 }),
    neighborhood: text("neighborhood"),
    telefone: varchar("telefone", { length: 15 }),
    email: text("email"),
    responsavelLegal: text("responsavel_legal"),
    createdAt: timestamp("created_at").defaultNow(),
});
export const funcionarios = pgTable("funcionarios", {
    id: serial("id").primaryKey(),
    empresaId: integer("empresa_id").notNull(),
    fullName: text("full_name").notNull(),
    cpf: varchar("cpf", { length: 14 }).notNull().unique(),
    rg: varchar("rg", { length: 20 }),
    birthDate: varchar("birth_date", { length: 10 }),
    phone: varchar("phone", { length: 15 }),
    email: text("email"),
    addressStreet: text("address_street"),
    addressNumber: text("address_number"),
    addressComplement: text("address_complement"),
    cep: varchar("cep", { length: 9 }),
    city: text("city"),
    state: varchar("state", { length: 2 }),
    neighborhood: text("neighborhood"),
    contractRole: text("contract_role").notNull(),
    admissionDate: varchar("admission_date", { length: 10 }).notNull(),
    baseSalary: varchar("base_salary", { length: 20 }),
    totalSalary: varchar("total_salary", { length: 20 }),
    dailyValue: varchar("daily_value", { length: 20 }),
    paymentMethod: text("payment_method"),
    pixKey: text("pix_key"),
    bankDetails: text("bank_details"),
    asoDocUrl: text("aso_doc_url"),
    contractDocUrl: text("contract_doc_url"),
    identityDocUrl: text("identity_doc_url"),
    observations: text("observations"),
    createdAt: timestamp("created_at").defaultNow(),
});
